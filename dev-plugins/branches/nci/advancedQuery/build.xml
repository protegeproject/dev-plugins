<?xml version = "1.0" encoding = "utf-8"?>
<project name = "Query Plugin" default = "dist" basedir = ".">    
   <property environment="env"/>
   <property name="protege.home" value="${env.PROTEGE_HOME}"/>

   <property name = "build"   location = "./build"/>
   <property name = "src"     location = "./src"/>  
   <property name = "classes" location = "${build}/classes"/>  
   <property name = "plugins" location = "${build}/plugins"/>
   <property name = "lib" value = "../lib"/>
   <property name = "junit" value = "./junit"/>
   <property name = "plugin_dist" value = "edu.stanford.smi.protege.advancedQuery"/>
   <property name = "pluginName" value = "advancedQueryPlugin"/>


    <!-- 
       #  ********** Finding Protege Libraries. *************
       # 
       #  We are using an approach that allows developers to decide
       #  whether to hand copy the needed jars into the lib directory or
       #  to point them to a protege installation.
      -->
    <target name="checkProtegeHome">
      <condition property="protege.home.set">
        <available file="${protege.home}/protege.jar" type="file"/>
      </condition>
    </target>
    
    <target name="useProtegeHome" depends="checkProtegeHome" 
            if="protege.home.set">
      <echo message="Using Protege Home = ${protege.home} to find protege jars"/>
      <property name="protege.lib" value="${protege.home}/protege.jar"/>
      <property name="owl.lib"     value="${protege.home}/plugins/edu.stanford.smi.protegex.owl/protege-owl.jar"/>
    </target>
    
    <target name="useLibDir" depends="checkProtegeHome" 
            unless="protege.home.set">
       <echo message="Using lib dir to find protege jars"/>
      <property name="protege.lib" value="${lib}/protege.jar"/>
      <property name="owl.lib" value="${lib}/protege-owl.jar"/>
    </target>


    <target name = "checkProtegeLibs" depends="useProtegeHome, useLibDir">
      <condition property="libs.found">
        <and>
          <available file="${protege.lib}" type = "file"/>
          <available file="${owl.lib}" type = "file"/>
        </and>
      </condition>
      <path id = "project.classpath">    
        <pathelement location = "${protege.lib}"/>
        <pathelement location = "${owl.lib}"/>
        <pathelement location = "./lib/lucene-core-2.0.1-dev.jar"/>
        <pathelement location = "./lib/phonetix-0.2.jar"/>
        <pathelement location = "./lib/nciedittab.jar"/>
      </path>

    </target>

    <target name="checkProtegeLibsAndReport" depends="checkProtegeLibs"
            unless="libs.found">
      <echo message="Missing protege libraries.  You can either "/>
      <echo message="set the PROTEGE_HOME environment variable to a"/>
      <echo message="protege installation directory where the"/>
      <echo message="appropriate plugins have been installed or copy the"/>
      <echo message="needed jars into the lib directory"/>
      <echo message="The jar file in question is protege.jar."/>
      <fail message="build aborted."/>
    </target>
      
   <!-- 
     #  ********** Finding Protege Libraries Done. *************
     -->

	
   <target name = "init">
     <mkdir dir = "${classes}"/>
     <mkdir dir = "${plugins}"/>
     <mkdir dir = "${plugins}/${plugin_dist}"/>
   </target>  


   <target name = "compile" depends = "init, checkProtegeLibsAndReport">    
     <javac srcdir = "${src}" destdir = "${classes}" debug="on">
       <classpath refid = "project.classpath"/>    
     </javac>
     <copy todir="${classes}">
       <fileset dir = "${src}" includes = "**/*.gif"/>
     </copy>
   </target>

   <target name = "jar" depends = "compile">
     <jar jarfile = "${plugins}/${plugin_dist}/${pluginName}.jar" 
          basedir = "${classes}" 
          manifest = "${src}/META-INF/MANIFEST.MF"/>  
     <copy file = "./lib/lucene-core-2.0.1-dev.jar"
           todir = "${plugins}/${plugin_dist}"/>
     <copy file = "./lib/phonetix-0.2.jar"
           todir = "${plugins}/${plugin_dist}"/>
     <copy file = "./plugin.properties"
           todir = "${plugins}/${plugin_dist}"/>
   </target>

   <target name = "dist" depends = "jar">
     <zip basedir = "${plugins}"
          includes = "${plugin_dist}/**"
          destfile = "${plugins}/${pluginName}.zip"/>
   </target>

   <target name = "install" depends = "dist">
      <fail message = "set the protege.home variable to do an install">
         <condition>
            <not>
               <and>
                  <isset property="protege.home"/>
                  <available file="${protege.home}"
                             type="dir"/>
               </and>
            </not>
         </condition>
      </fail>
      <unzip src="${plugins}/${pluginName}.zip" 
             dest = "${protege.home}/plugins"
             overwrite = "true"/>
   </target>

   <target name = "junit-compile" depends = "compile">    
     <javac srcdir = "${junit}" destdir = "${classes}" debug="on">
       <classpath refid = "project.classpath"/>
       <classpath>
         <pathelement location = "${classes}"/>
       </classpath>       
     </javac>    
   </target>

   <!--
     My experience is that "ant junit" provides almost no debugging
     information when things go wrong.  (This was not true in my
     previous job and I don't know the difference. log4j??)  When there is a
     problem I generally use my development environment to debug
     faulting junit.  For scripting problems with the junits the options

        filtertrace="false" 
        showoutput="true"

     give a little more information.  Also when you know that some
     junits are failing, removing the option 

        haltonfailure = "on" 

     is helpful for showing all the failures.  But in the committed
     version I think that this option is very important because it
     means that the developer will never mistakenly believe that
     junits have succeeded.
       -->

   <target name = "junit" 
           description = "run the tests (anybody can do it)"
           depends = "dist">
     <unzip src="${lib}/protege-owl.zip"
            dest="${plugins}"/>
     <junit haltonfailure = "on" 
            printsummary="withOutAndErr"
            dir = ".." fork = "yes">
        <classpath>
           <pathelement location="${classes}"/>
           <pathelement location = "${protege.lib}"/>
           <pathelement location = "./lib/lucene-core-2.0.1-dev.jar"/>
           <pathelement location = "./lib/phonetix-0.2.jar"/>
           <fileset
              dir="${plugins}/edu.stanford.smi.protegex.owl">
              <include name = "**/*.jar"/>
           </fileset>
        </classpath>
        <batchtest>
           <fileset dir="${junit}/src">
             <include name = "**/*Test.java"/>
           </fileset>
        </batchtest>
     </junit>
   </target>

   <target name = "clean">
     <delete dir = "${plugins}"/>
     <delete dir = "${classes}"/>
     <delete dir = "../lucene"/>
     <delete dir = "../logs"/>
   </target>

</project>
